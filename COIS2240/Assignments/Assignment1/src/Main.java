/*
Program for Assignment 1
Written by Alisher Turubayev,
    Trent University

Purpose: to demonstrate performance differences between recursion and iteration by timing the
    calculation of Fibonacci numbers

Uses no other classes
 */

import java.util.Scanner;

public class Main {
    public static void main (String[] args) {
        // Stores user input
        int userInput;
        // Scanner for taking input in
        Scanner scanner = new Scanner(System.in);

        System.out.println("Input the number of Fibonacci numbers to be found:");
        // Validate user input
        while (!scanner.hasNextInt() || (userInput = scanner.nextInt()) <= 0) {
            scanner.nextLine();
            System.out.println("The input is not a number or number given is less than 1. Please, try again");
        }

        // Save start time for recursion, start recursion and save end time
        long startTimeRec = System.nanoTime();
        fiboSeriesRec(userInput);
        long endTimeRec = System.nanoTime();

        // Save start time for iteration, start iteration and save end time
        long startTimeIte = System.nanoTime();
        fiboSeriesIte(userInput);
        long endTimeIte = System.nanoTime();

        // Calculate the running time of both methods
        long timeElapsedRec = endTimeRec - startTimeRec,
                timeElapsedIte = endTimeIte - startTimeIte;

        System.out.println("Time elapsed for recursion (nanoseconds): " + timeElapsedRec);
        System.out.println("Time elapsed for iteration (nanoseconds): " + timeElapsedIte);

        // If there is a string argument '--output-all' passed, output the generated Fibonacci numbers
        if (args.length == 1 && args[0].equals("--output-all")) {
            System.out.println("The sequence generated by recursion");
            for (int index = 1; index <= userInput; index++) {
                System.out.print(fiboSeriesRec(index) + " ");
            }
            System.out.println();

            System.out.println("The sequence generated by iteration:");
            for (int index = 1; index <= userInput; index++) {
                System.out.print(fiboSeriesIte(index) + " ");
            }
        }
    }

    /*
    fiboSeriesRec
    Purpose: recursively finds the Nth Fibonacci number
    Usage: invoked by main method
    Arguments:
        N: int. Denotes an index of Fibonacci number to be found
    Returns:
        long. Found Fibonacci number
     */
    private static long fiboSeriesRec (int N) {
        // If current index is a base case, return base case
        // Otherwise, recursively find it
        if (N == 1)
            return 0;
        else if (N == 2)
            return 1;
        else
            return fiboSeriesRec(N - 1) + fiboSeriesRec(N - 2);
    }

    /*
    fiboSeriesIte
    Purpose: iteratively finds the Fibonacci numbers until N
    Usage: invoked by main method
    Arguments:
        N: int. Denotes an index of Fibonacci number to be found
    Returns:
        long. Found Fibonacci number
     */
    private static long fiboSeriesIte (int N) {
        // Check if the N is a base case (i.e. 1 or 2)
        if (N == 1)
            return 0;
        if (N == 2)
            return 1;

        // Store the previous two numbers (in beginning, base cases)
        long prev1 = 1, prev2 = 0;
        // Store the resulting Fibonacci number
        long result = 0;

        // Start the loop and find all other numbers
        for (int index = 3; index <= N; index++) {
            result = prev1 + prev2;
            prev2 = prev1;
            prev1 = result;
        }

        return result;
    }
}
